#Using PiCARD, to sort,markduplicate, convert and indexing bam files generated by BWA
#Sorting the alignments generated by BWA, mark duplicates required for variant calling 
#convert the sam file to bam file and make the index out of bam file which allow fast look-up into bam files

configfile: "/home/masih/BacterialSimulator/Pipeline/ConfigFile.yaml"

rule SamToBam:
    input:
        expand("{outputDIR}/{simulations}/{{simulation_index}}/Assembly/{{name}}.sam",outputDIR=config["outputDIR"],simulations=config["simulations"]),
    output:
        BamSorted=expand("{outputDIR}/{simulations}/{{simulation_index}}/Assembly/{{name}}.bamSorted",outputDIR=config["outputDIR"],simulations=config["simulations"]),
        BamMarkDuplicate=expand("{outputDIR}/{simulations}/{{simulation_index}}/Assembly/{{name}}.bamMarkDuplicate",outputDIR=config["outputDIR"],simulations=config["simulations"]),
        Metrics=expand("{outputDIR}/{simulations}/{{simulation_index}}/Assembly/{{name}}.Metrics",outputDIR=config["outputDIR"],simulations=config["simulations"]),
        Bai=expand("{outputDIR}/{simulations}/{{simulation_index}}/Assembly/{{name}}.bamMarkDuplicate.bai",outputDIR=config["outputDIR"],simulations=config["simulations"]),
    params:
        picard=config['picard'],
        logNAME="Sam sorter/Bam Converter/Mark duplicates/Indexer." + strftime("%Y-%m-%d.%H-%M-%S", localtime()),
    run:
        from subprocess import call
        callString="%s SortSam INPUT=%s OUTPUT=%s SORT_ORDER=coordinate"%(params.picard,str(input),str(output.BamSorted))
        call('echo "' + str(params.logNAME) + ':\n ' + callString + '\n" >> ' + config["ShellCallFile"], shell=True)
        call(callString, shell=True)
        callString="%s MarkDuplicates INPUT=%s OUTPUT=%s METRICS_FILE=%s"%(params.picard,str(output.BamSorted),str(output.BamMarkDuplicate),str(output.Metrics))
        call('echo "' + str(params.logNAME) + ':\n ' + callString + '\n" >> ' + config["ShellCallFile"], shell=True)
        call(callString, shell=True)
        callString="%s BuildBamIndex INPUT=%s OUTPUT=%s "%(params.picard,str(output.BamMarkDuplicate),str(output.Bai))
        call('echo "' + str(params.logNAME) + ':\n ' + callString + '\n" >> ' + config["ShellCallFile"], shell=True)
        call(callString, shell=True)
        
        
