configfile: "/home/masih/BacterialSimulator/Pipeline/ConfigFile.yaml"

rule SingleReadAligner:
    input:
        fastq=expand("{outputDIR}/{simulations}/{{simulation_index}}/Assembly/{{name}}.fq",outputDIR=config["outputDIR"],simulations=config["simulations"]),
        ref= expand("{outputDIR}/{SequenceDIR}/{fasta_output}",outputDIR=config["outputDIR"],SequenceDIR=config["SequenceDIR"],fasta_output=str(config["fasta_file"]).split('/')[-1]),
    output:
        sam=expand("{outputDIR}/{simulations}/{{simulation_index}}/Assembly/{{name}}.sam",outputDIR=config["outputDIR"],simulations=config["simulations"]),
    params:
        bwa=config['bwa'],
        platform=config['platform'],
        ShellCallFile=config['ShellCallFile'],
    threads: 4
    run:
        from subprocess import call
        CallString='%s mem -R "@RG\\tID:%s\\tPL:%s\\tLB:%s\\tSM:%s" -t %s %s %s -v 2 > %s ' %(params.bwa,str(wildcards.name)+str(params.platform),str(params.platform),str(wildcards.name),str(wildcards.name),str(threads),str(input.ref),str(input.fastq),str(output.sam))
        call('echo %s >> %s' %(CallString,params.ShellCallFile),shell=True)
        call(CallString,shell=True)
        import sys
        import fileinput
        for line in fileinput.input(str(output.sam), inplace=1):
            if line[0:3]== "@PG":
                continue# write a blank line after the 5th line
            sys.stdout.write(line)  
           

#ID: Unique sample ID, platform+lane can be a good example
#PL: platform
#LB: library
#SM: sample