configfile: "/home/masih/BacterialSimulator/Pipeline/ConfigFile.yaml"


rule AssemblerGenome:
    input:
        phylogeny=expand("{outputDIR}/{PhylogeneticTreeDIR}/RealTree.nwk",outputDIR=config["outputDIR"],PhylogeneticTreeDIR=config["PhylogeneticTreeDIR"]),
        PG= expand("{outputDIR}/{SequenceDIR}/{fasta_output}_Protein_coding_gene/{iteration}.db",outputDIR=config["outputDIR"],SequenceDIR=config["SequenceDIR"],fasta_output=config["fasta_output"],iteration=range(int(config['Protein_coding_gene_CatSize']))),
        IR= expand("{outputDIR}/{SequenceDIR}/{fasta_output}_Intergenic_region/{iteration}.fa",outputDIR=config["outputDIR"],SequenceDIR=config["SequenceDIR"],fasta_output=config["fasta_output"],iteration=range(int(config['Intergenic_region_CatSize']))),        
        RG=expand("{outputDIR}/{simulations}/{{simulation_index}}/RNAGene/{iteration}/dawg.params",outputDIR=config["outputDIR"],simulations=config["simulations"],iteration=range(int(config['RNA_gene_CatSize']))),
        RR=expand("{outputDIR}/{simulations}/{{simulation_index}}/RepeatRegions/{iteration}/dawg.params",outputDIR=config["outputDIR"],simulations=config["simulations"],iteration=range(int(config['Repeat_region_CatSize']))),
        JSON=expand("{outputDIR}/{SequenceDIR}/{fasta_output}.json",outputDIR=config["outputDIR"],SequenceDIR=config["SequenceDIR"],fasta_output=config["fasta_output"]),
    output:
        expand("{outputDIR}/{simulations}/{{simulation_index}}/Assembly/{{name}}.fsa",outputDIR=config["outputDIR"],simulations=config["simulations"])
    params:
        Assembler=config['ModuleDir']+'/Assembler/AssemblerGenome.py',
        PythonDir=config['PythonDir'],
        ShellCallFile=config['ShellCallFile'],
    run:
        from subprocess import call
        CallString='%s %s -J %s -F %s -P %s -I %s -N %s -R %s -O %s' %(params.PythonDir,params.Assembler,\
                                                                 str(input.JSON),str(input.phylogeny),\
                                                                 str(input.PG),str(input.IR),str(input.RR),\
                                                                 str(input.RG),str(output))
        call('echo %s >> %s' %(CallString,params.ShellCallFile),shell=True)
        call(CallString,shell=True)
        
            
            
        
        