#configfile: "/home/masih/Baterial_simulator/Pipeline/ConfigFile.yaml"

def indexer(wildcards):
    return(simulation_index_dict[int(wildcards.simulation_index)])

rule Params_Permuter:
    input: 
        phylogeny=expand("{outputDIR}/{PhylogeneticTreeDIR}/RealTree.nwk",outputDIR=config["outputDIR"],PhylogeneticTreeDIR=config["PhylogeneticTreeDIR"]),
        ProteinCodingGene= expand("{outputDIR}/{SequenceDIR}/{fasta_output}_protein_coding_gene.db",outputDIR=config["outputDIR"],SequenceDIR=config["SequenceDIR"],fasta_output=config["fasta_output"]),
        RNAGene= expand("{outputDIR}/{SequenceDIR}/{fasta_output}_RNA_gene.fa",outputDIR=config["outputDIR"],SequenceDIR=config["SequenceDIR"],fasta_output=config["fasta_output"]),
        IntergenicRegion= expand("{outputDIR}/{SequenceDIR}/{fasta_output}_intergenic_region.fa",outputDIR=config["outputDIR"],SequenceDIR=config["SequenceDIR"],fasta_output=config["fasta_output"]),
        RepeatRegion= expand("{outputDIR}/{SequenceDIR}/{fasta_output}_repetitive_region.fa",outputDIR=config["outputDIR"],SequenceDIR=config["SequenceDIR"],fasta_output=config["fasta_output"]),
    output:
        ProteinCodingGeneParams=expand("{outputDIR}/{simulations}/{{simulation_index}}/ProteinCodingGene/alfsim.drw",outputDIR=config["outputDIR"],simulations=config["simulations"]),
        IntergenicRegionParams=expand("{outputDIR}/{simulations}/{{simulation_index}}/IntergenicRegions/dawg_IR.dawg",outputDIR=config["outputDIR"],simulations=config["simulations"]),
        RNAGeneParams=expand("{outputDIR}/{simulations}/{{simulation_index}}/RNAGenes/dawg_RG.dawg",outputDIR=config["outputDIR"],simulations=config["simulations"]),
        RepeatRegionParams=expand("{outputDIR}/{simulations}/{{simulation_index}}/RepeatRegions/dawg_RR.dawg",outputDIR=config["outputDIR"],simulations=config["simulations"]),
    params:
        value= indexer,
        destdir_IR=expand("{outputDIR}/{simulations}/{{simulation_index}}/IntergenicRegions/dawg_IR.fas",outputDIR=config["outputDIR"],simulations=config["simulations"]),
        destdir_RG=expand("{outputDIR}/{simulations}/{{simulation_index}}/IntergenicRegions/dawg_RG.fas",outputDIR=config["outputDIR"],simulations=config["simulations"]),
        destdir_RR=expand("{outputDIR}/{simulations}/{{simulation_index}}/IntergenicRegions/dawg_RR.fas",outputDIR=config["outputDIR"],simulations=config["simulations"]),
    run:
        iterations=params.value
        content=str()
        content+='SetRand(2345):\n' #For generating reproducable results
        content+="realorganism := '%s';\n" %str(input.ProteinCodingGene)
        #Defining how the phylogenetic tree should be produced
    
        content+="treeType := 'Custom';\ntreeFile := '%s' ;\n" % str(input.phylogeny)
            
        #Defining four models for substitution of sequence element categories 
        sub_txt='substModels := [SubstitutionModel('
        
        sub_list=[Protein_coding_genes_models[0],Intergenic_regions_models[0],RNA_genes_models[0],Repeat_regions_models[0]]
        sub_list_index=['_prot','_intergenic','_RNA_genes','_repeat_regions']
        
        for param_cat in Global_models[Protein_coding_genes_models[0]]:
                if param_cat == 'name':
                    sub_txt+=iterations[Global_models[Protein_coding_genes_models[0]][param_cat][0]+sub_list_index[0]]
                    sub_txt+=","
                if param_cat == 'parameters':
                    sub_param_txt='['
                    for sub_param_cat in Global_models[Protein_coding_genes_models[0]][param_cat]:
                        sub_param_txt+=str(round(iterations[sub_param_cat+sub_list_index[0]],2))
                        sub_param_txt+=', '
                    sub_param_txt=sub_param_txt[:-2]+'],'
                    sub_txt+=sub_param_txt
                if param_cat == 'frequencies':
                        sub_param_txt='['
                        frequencies=[items for items in iterations[Global_models[Protein_coding_genes_models[0]][param_cat][0]+sub_list_index[0]].split(';')]
                        for freqs in frequencies:
                             sub_param_txt+=freqs+','
                        sub_param_txt=sub_param_txt[:-1]+'], '
                        sub_txt+=sub_param_txt 
                if param_cat == 'neutral_DNA':
                        sub_param_txt=iterations[Global_models[Protein_coding_genes_models[0]][param_cat][0]+sub_list_index[0]]
                        sub_txt+=sub_param_txt+'),'
        if Protein_coding_genes_models[0] =='substModel_codon':
                sub_txt=sub_txt[:-1]+'),'
        sub_txt=sub_txt[:-1]+'];\n'
        content+=sub_txt
        #Defining four models for insertions/deletions of sequence element categories 
        indel_list=[Protein_coding_genes_models[1],Intergenic_regions_models[1],RNA_genes_models[1],Repeat_regions_models[1]]
        indel_list_index=['_prot','_intergenic','_RNA_genes','_repeat_regions']
        indel_txt='IndelModels := ['
        iter_indel=0
        indel_txt+="IndelModel("
        for param_cat in Global_models[Protein_coding_genes_models[1]]:
                if param_cat == 'Gainrate':
                    indel_txt+=str(round(iterations[Global_models[Protein_coding_genes_models[1]][param_cat][0]+indel_list_index[0]],5))
                    indel_txt+=","
                if param_cat == 'model':
                    indel_txt+=iterations[Global_models[Protein_coding_genes_models[1]][param_cat][0]+indel_list_index[0]]
                    indel_txt+=","
                if param_cat == 'parameters':
                    indel_param_txt='['
                    for indel_param_cat in Global_models[Protein_coding_genes_models[1]][param_cat]:
                        indel_param_txt+=str(round(iterations[indel_param_cat+indel_list_index[0]],5))
                        indel_param_txt+=', '
                    indel_param_txt=indel_param_txt[:-2]+'],'
                    indel_txt+=indel_param_txt
                if param_cat == 'maxLen':
                    indel_txt+=str(int(iterations[Global_models[Protein_coding_genes_models[1]][param_cat][0]+indel_list_index[0]]))
                    indel_txt+=","
                if param_cat == 'Lossrate':
                    indel_txt+=str(round(iterations[Global_models[Protein_coding_genes_models[1]][param_cat][0]+indel_list_index[0]],5))
                    indel_txt+="),"
        indel_txt=indel_txt[:-1]+'];\n'
        content+=indel_txt
        #Defining four models for rate variation heterogeniety within each element of sequence categories  
        var_list=[Protein_coding_genes_models[2],Intergenic_regions_models[2],RNA_genes_models[2],Repeat_regions_models[2]]
        var_list_index=['_prot','_intergenic','_RNA_genes','_repeat_regions']
        var_txt='rateVarModels := ['
        var_txt+="RateVarModel("
        for param_cat in Global_models[Protein_coding_genes_models[2]]:
                if param_cat == 'model':
                    var_txt+=iterations[Global_models[Protein_coding_genes_models[2]][param_cat][0]+var_list_index[0]]
                    var_txt+=","
                if param_cat == 'areas':
                    var_txt+=str(int(iterations[Global_models[Protein_coding_genes_models[2]][param_cat][0]+var_list_index[0]]))
                    var_txt+=","
                if param_cat == 'motifFreq':
                    if Protein_coding_genes_models[2] == 'rateVar_model_Gamma':
                        var_txt+=str(round(iterations[Global_models[Protein_coding_genes_models[2]][param_cat][0]+var_list_index[0]],5))
                        var_txt+="," 
                    if Protein_coding_genes_models[2] == 'rateVar_model_poisson':
                        var_txt+=str(round(iterations[Global_models[Protein_coding_genes_models[2]][param_cat][0]+var_list_index[0]],5))
                        var_txt+="),"
                if param_cat == 'alpha':
                    var_txt+=str(round(iterations[Global_models[Protein_coding_genes_models[2]][param_cat][0]+var_list_index[0]],5))
                    var_txt+="),"
        var_txt=var_txt[:-1]+'];\n'
        content+=var_txt
        #SeqType assignements
        #cat2id={'Protein_coding_gene':1,'Intergenic_region':2,'RNA_gene':3,'NonCoding_DNA':4}
        #catid=[cat2id[item] for item in seqTypes]
        #seq_type_txt="seqTypes := [[1,1,1,'Protein_coding_gene'], [2,2,2,'Intergenic_region'],[3,3,3,'RNA_gene'],[4,4,4,'NonCoding_DNA']];\n"
        
        #seq_type_txt+='seqTypeAssignments := %s;\n' % catid
        
        #Defining one model for rate variation heterogeniety among sequence elements 
        var_b_txt= "amongGeneDistr := '%s';\naGAlpha := %s;\n" %(iterations['amongGeneDistr'],iterations['aGAlpha'])
        content+=var_b_txt
        #Parameters concerning gene duplications
        dupl_txt="geneDuplRate := %s;\nnumberDupl := %s;\ntransDupl := %s;\nfissionDupl := %s;\nfussionDupl := %s;\nP_pseudogene := %s;\nP_neofunc := %s;\nP_subfunc := %s;\n" % (iterations['geneDuplRate'],\
                 iterations['numberDupl'],iterations['transDupl'],iterations['fissionDupl'],iterations['fusionDupl'],iterations['P_pseudogene'],iterations['P_neofunc'],iterations['P_subfunc'])                                                                                                                                                            
        content+=dupl_txt
        #Parameters concerning gene loss
        loss_txt="geneLossRate := %s;\nnumberLoss := %s;\n" % (iterations['geneLossRate'],iterations['numberLoss'])   
        content+=loss_txt
        #parameters concerning LGT
        lgt_txt="lgtRate := %s;\northRep := %s;\nlgtGRate := %s;\nlgtGSize := %s;\n" %(iterations['lgtRate'],iterations['orthRep'],iterations['lgtGRate'],iterations['lgtGSize'])      
        content+=lgt_txt
        #Parameters concerning genome rearrangement
        genome_rear_txt="invers := %s;\ninvSize := %s;\ntransloc := %s;\ntransSize := %s;\ninvtrans := %s;\nfissionRate := %s;\nfusionRate := %s;\n" %(iterations['invers'],iterations['invSize'],iterations['transloc'],iterations['transSize'],iterations['invtrans'],iterations['fissionRate'],iterations['fusionRate'])
        content+=genome_rear_txt
        #content+=seq_type_txt
        #Parameters for writing the output
        destination= "mname := 'ProtSim';\n"
        content+=destination
        out_txt="simOutput := {\n'Newick',\n'MSA',\n'Fasta',\nNULL}:"
        content+=out_txt
        txt=open(str(output.ProteinCodingGeneParams),'w')
        txt.write(content)
        txt.close()
        #########################################################################################
        # Write dawg parameters for simulating Intergenic regions
        noncoding_cats=['Intergenic_regions','RNA_genes','Repeat_regions']
        sub_list_index=['_intergenic','_RNA_genes','_repeat_regions']
        cat_ind=0
        with open(str(input.phylogeny),'r') as file:
            line=file.readline()
            phylogenetic_tree=line.strip()
            
        txt=open(str(output.IntergenicRegionParams),'w')
        content=str()
        phylogeny_txt='[Tree]\nTree = "%s"\n'%phylogenetic_tree
        content+=phylogeny_txt
        #Defining the parameters for simulation of nucleotide substituition 
        sub_txt='[Subst]\nModel = '
        for param_cat in Global_models_noncoding[Intergenic_regions_models[0]]:
                if param_cat == 'name':
                    sub_txt+=iterations[Global_models_noncoding[Intergenic_regions_models[0]][param_cat][0]+sub_list_index[0]]
                    sub_txt+='\n'
                if param_cat == 'parameters':
                    sub_param_txt='Params = '
                    for sub_param_cat in Global_models_noncoding[Intergenic_regions_models[0]][param_cat]:
                        sub_param_txt+=str(round(iterations[sub_param_cat+sub_list_index[0]],2))
                        sub_param_txt+=','
                    sub_param_txt=sub_param_txt[:-1]+'\n'
                    sub_txt+=sub_param_txt
                if param_cat == 'frequencies':
                        sub_param_txt='Freqs = '
                        frequencies=[items for items in iterations[Global_models_noncoding[Intergenic_regions_models[0]][param_cat][0]+sub_list_index[0]].split(';')]
                        for freqs in frequencies:
                             sub_param_txt+=freqs+','
                        sub_param_txt=sub_param_txt[:-1]+'\n'
                        sub_txt+=sub_param_txt 
        content+=sub_txt
        #Defining the parameters for simulation of varitaion of substituion rate and invariant site ratio
        var_txt=str()
        for param_cat in Global_models_noncoding[Intergenic_regions_models[2]]:
                if param_cat == 'model':
                    var_txt+='Rate.Model = '
                    var_txt+=iterations[Global_models_noncoding[Intergenic_regions_models[2]][param_cat][0]+sub_list_index[0]]
                    var_txt+="\n"
                if param_cat == 'parameters':
                    var_txt_sub='Rate.Params = '
                    for var_param_cat in Global_models_noncoding[Intergenic_regions_models[2]][param_cat]:
                        var_txt_sub+=str(round(iterations[var_param_cat+sub_list_index[0]],5))
                        var_txt_sub+="," 
                    var_txt_sub=var_txt_sub[:-1]+'\n'
                    var_txt+=var_txt_sub
        content+=var_txt
        #Defining the parameters for simulation of insertion and deletion
        indel_txt='[Indel]\n'
        for param_cat in Global_models_noncoding[Intergenic_regions_models[1]]:
                if param_cat == 'Gainrate':
                    indel_txt+='Rate = '
                    indel_txt+=str(round(iterations[Global_models_noncoding[Intergenic_regions_models[1]][param_cat][0]+sub_list_index[0]],5))
                    indel_txt+="\n"
                if param_cat == 'model':
                    indel_txt+='Model = '
                    indel_txt+=iterations[Global_models_noncoding[Intergenic_regions_models[1]][param_cat][0]+sub_list_index[0]]
                    indel_txt+="\n"
                if param_cat == 'parameters':
                    indel_param_txt='Params = '
                    for indel_param_cat in Global_models_noncoding[Intergenic_regions_models[1]][param_cat]:
                        indel_param_txt+=str(round(iterations[indel_param_cat+sub_list_index[0]],5))
                        indel_param_txt+=', '
                    indel_param_txt=indel_param_txt[:-2]+'\n'
                    indel_txt+=indel_param_txt
                if param_cat == 'maxLen':
                    indel_txt+='Max = '
                    indel_txt+=str(int(iterations[Global_models_noncoding[Intergenic_regions_models[1]][param_cat][0]+sub_list_index[0]]))
                    indel_txt+="\n"
        content+=indel_txt
        #Determining root genome sequence to be simulated
        root_txt='[Root]\n'
        #root_txt+=str(input.IntergenicRegion)
        from Bio import SeqIO
        RootSeq=str()
        with open (str(input.IntergenicRegion),'r') as file:
            for records in SeqIO.parse(file,'fasta'):
                RootSeq+=str(records.seq)
        root_txt+='Seq= %s\n' %RootSeq
        #Determining number of simulation replicates
        sim_txt='[Sim]\nReps = 1\n'
        sim_txt+='Seed = 1234\n'
        #Determining the output file of simulation 
        output_txt='[Output]\nFile = '
        output_txt+='%s.fsa'%str(output.IntergenicRegionParams)
        content+=root_txt+sim_txt+output_txt
        txt.write(content)
        txt.close()
        ###################################################################################
            # Write dawg parameters for simulating RNA genes
        noncoding_cats=['Intergenic_regions','RNA_genes','Repeat_regions']
        sub_list_index=['_intergenic','_RNA_genes','_repeat_regions']
        cat_ind=0
        with open(str(input.phylogeny),'r') as file:
            line=file.readline()
            phylogenetic_tree=line.strip()
            
        txt=open(str(output.RNAGeneParams),'w')
        content=str()
        phylogeny_txt='[Tree]\nTree = "%s"\n'%phylogenetic_tree
        content+=phylogeny_txt
        #Defining the parameters for simulation of nucleotide substituition 
        sub_txt='[Subst]\nModel = '
        for param_cat in Global_models_noncoding[RNA_genes_models[0]]:
                if param_cat == 'name':
                    sub_txt+=iterations[Global_models_noncoding[RNA_genes_models[0]][param_cat][0]+sub_list_index[1]]
                    sub_txt+='\n'
                if param_cat == 'parameters':
                    sub_param_txt='Params = '
                    for sub_param_cat in Global_models_noncoding[RNA_genes_models[0]][param_cat]:
                        sub_param_txt+=str(round(iterations[sub_param_cat+sub_list_index[1]],2))
                        sub_param_txt+=','
                    sub_param_txt=sub_param_txt[:-1]+'\n'
                    sub_txt+=sub_param_txt
                if param_cat == 'frequencies':
                        sub_param_txt='Freqs = '
                        frequencies=[items for items in iterations[Global_models_noncoding[RNA_genes_models[0]][param_cat][0]+sub_list_index[1]].split(';')]
                        for freqs in frequencies:
                             sub_param_txt+=freqs+','
                        sub_param_txt=sub_param_txt[:-1]+'\n'
                        sub_txt+=sub_param_txt 
        content+=sub_txt
        #Defining the parameters for simulation of varitaion of substituion rate and invariant site ratio
        var_txt=str()
        for param_cat in Global_models_noncoding[RNA_genes_models[2]]:
                if param_cat == 'model':
                    var_txt+='Rate.Model = '
                    var_txt+=iterations[Global_models_noncoding[RNA_genes_models[2]][param_cat][0]+sub_list_index[1]]
                    var_txt+="\n"
                if param_cat == 'parameters':
                    var_txt_sub='Rate.Params = '
                    for var_param_cat in Global_models_noncoding[RNA_genes_models[2]][param_cat]:
                        var_txt_sub+=str(round(iterations[var_param_cat+sub_list_index[1]],5))
                        var_txt_sub+="," 
                    var_txt_sub=var_txt_sub[:-1]+'\n'
                    var_txt+=var_txt_sub
        content+=var_txt
        #Defining the parameters for simulation of insertion and deletion
        indel_txt='[Indel]\n'
        for param_cat in Global_models_noncoding[RNA_genes_models[1]]:
                if param_cat == 'Gainrate':
                    indel_txt+='Rate = '
                    indel_txt+=str(round(iterations[Global_models_noncoding[RNA_genes_models[1]][param_cat][0]+sub_list_index[1]],5))
                    indel_txt+="\n"
                if param_cat == 'model':
                    indel_txt+='Model = '
                    indel_txt+=iterations[Global_models_noncoding[RNA_genes_models[1]][param_cat][0]+sub_list_index[1]]
                    indel_txt+="\n"
                if param_cat == 'parameters':
                    indel_param_txt='Params = '
                    for indel_param_cat in Global_models_noncoding[RNA_genes_models[1]][param_cat]:
                        indel_param_txt+=str(round(iterations[indel_param_cat+sub_list_index[1]],5))
                        indel_param_txt+=', '
                    indel_param_txt=indel_param_txt[:-2]+'\n'
                    indel_txt+=indel_param_txt
                if param_cat == 'maxLen':
                    indel_txt+='Max = '
                    indel_txt+=str(int(iterations[Global_models_noncoding[RNA_genes_models[1]][param_cat][0]+sub_list_index[1]]))
                    indel_txt+="\n"
        content+=indel_txt
        #Determining root genome sequence to be simulated
        root_txt='[Root]\n'
        #root_txt+=str(input.RNAGene)
        RootSeq=str()
        with open (str(input.RNAGene),'r') as file:
            for records in SeqIO.parse(file,'fasta'):
                RootSeq+=str(records.seq)
        root_txt+='Seq= %s\n' %RootSeq
        #Determining number of simulation replicates
        sim_txt='[Sim]\nReps = 1\n'
        sim_txt+='Seed = 1234\n'
        #Determining the output file of simulation 
        output_txt='[Output]\nFile = '
        output_txt+='%s.fsa'%str(output.RNAGeneParams)
        content+=root_txt+sim_txt+output_txt
        txt.write(content)
        txt.close()
        ###################################################################################
        # Write dawg parameters for simulating Repeat regions
        noncoding_cats=['Intergenic_regions','RNA_genes','Repeat_regions']
        sub_list_index=['_intergenic','_RNA_genes','_repeat_regions']
        cat_ind=0
        with open(str(input.phylogeny),'r') as file:
            line=file.readline()
            phylogenetic_tree=line.strip()
            
        txt=open(str(output.RepeatRegionParams),'w')
        content=str()
        phylogeny_txt='[Tree]\nTree = "%s"\n'%phylogenetic_tree
        content+=phylogeny_txt
        #Defining the parameters for simulation of nucleotide substituition 
        sub_txt='[Subst]\nModel = '
        for param_cat in Global_models_noncoding[Repeat_regions_models[0]]:
                if param_cat == 'name':
                    sub_txt+=iterations[Global_models_noncoding[Repeat_regions_models[0]][param_cat][0]+sub_list_index[2]]
                    sub_txt+='\n'
                if param_cat == 'parameters':
                    sub_param_txt='Params = '
                    for sub_param_cat in Global_models_noncoding[Repeat_regions_models[0]][param_cat]:
                        sub_param_txt+=str(round(iterations[sub_param_cat+sub_list_index[2]],2))
                        sub_param_txt+=','
                    sub_param_txt=sub_param_txt[:-1]+'\n'
                    sub_txt+=sub_param_txt
                if param_cat == 'frequencies':
                        sub_param_txt='Freqs = '
                        frequencies=[items for items in iterations[Global_models_noncoding[Repeat_regions_models[0]][param_cat][0]+sub_list_index[2]].split(';')]
                        for freqs in frequencies:
                             sub_param_txt+=freqs+','
                        sub_param_txt=sub_param_txt[:-1]+'\n'
                        sub_txt+=sub_param_txt 
        content+=sub_txt
        #Defining the parameters for simulation of varitaion of substituion rate and invariant site ratio
        var_txt=str()
        for param_cat in Global_models_noncoding[Repeat_regions_models[2]]:
                if param_cat == 'model':
                    var_txt+='Rate.Model = '
                    var_txt+=iterations[Global_models_noncoding[Repeat_regions_models[2]][param_cat][0]+sub_list_index[2]]
                    var_txt+="\n"
                if param_cat == 'parameters':
                    var_txt_sub='Rate.Params = '
                    for var_param_cat in Global_models_noncoding[Repeat_regions_models[2]][param_cat]:
                        var_txt_sub+=str(round(iterations[var_param_cat+sub_list_index[2]],5))
                        var_txt_sub+="," 
                    var_txt_sub=var_txt_sub[:-1]+'\n'
                    var_txt+=var_txt_sub
        content+=var_txt
        #Defining the parameters for simulation of insertion and deletion
        indel_txt='[Indel]\n'
        for param_cat in Global_models_noncoding[Repeat_regions_models[1]]:
                if param_cat == 'Gainrate':
                    indel_txt+='Rate = '
                    indel_txt+=str(round(iterations[Global_models_noncoding[Repeat_regions_models[1]][param_cat][0]+sub_list_index[2]],5))
                    indel_txt+="\n"
                if param_cat == 'model':
                    indel_txt+='Model = '
                    indel_txt+=iterations[Global_models_noncoding[Repeat_regions_models[1]][param_cat][0]+sub_list_index[2]]
                    indel_txt+="\n"
                if param_cat == 'parameters':
                    indel_param_txt='Params = '
                    for indel_param_cat in Global_models_noncoding[Repeat_regions_models[1]][param_cat]:
                        indel_param_txt+=str(round(iterations[indel_param_cat+sub_list_index[2]],5))
                        indel_param_txt+=', '
                    indel_param_txt=indel_param_txt[:-2]+'\n'
                    indel_txt+=indel_param_txt
                if param_cat == 'maxLen':
                    indel_txt+='Max = '
                    indel_txt+=str(int(iterations[Global_models_noncoding[Repeat_regions_models[1]][param_cat][0]+sub_list_index[2]]))
                    indel_txt+="\n"
        content+=indel_txt
        #Determining root genome sequence to be simulated
        root_txt='[Root]\n'
        #root_txt+=str(input.RepeatRegion)
        RootSeq=str()
        with open (str(input.RepeatRegion),'r') as file:
            for records in SeqIO.parse(file,'fasta'):
                RootSeq+=str(records.seq)
        root_txt+='Seq= %s\n' %RootSeq
        #Determining number of simulation replicates
        sim_txt='[Sim]\nReps = 1\n'
        sim_txt+='Seed = 1234\n'
        #Determining the output file of simulation 
        output_txt='[Output]\nFile = '
        output_txt+='%s.fsa'%str(output.RepeatRegionParams)
        content+=root_txt+sim_txt+output_txt
        txt.write(content)
        txt.close()
        
        

        
        

