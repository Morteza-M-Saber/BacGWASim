#configfile: "/home/masih/Baterial_simulator/Pipeline/ConfigFile.yaml"
from os import listdir,path

def indexer(wildcards):
    return(simulation_index_dict[int(wildcards.simulation_index)])

rule Params_PermuterPG:
    input: 
        phylogeny=expand("{outputDIR}/{PhylogeneticTreeDIR}/RealTree.nwk",outputDIR=config["outputDIR"],PhylogeneticTreeDIR=config["PhylogeneticTreeDIR"]),
        ProteinCodingGene= expand("{outputDIR}/{SequenceDIR}/{fasta_output}_Protein_coding_gene/{{iteration}}.db",outputDIR=config["outputDIR"],SequenceDIR=config["SequenceDIR"],fasta_output=config["fasta_output"]),
    output:
        ProteinCodingGeneParams=expand("{outputDIR}/{simulations}/{{simulation_index}}/ProteinCodingGene/{{iteration}}/alfsim.drw",outputDIR=config["outputDIR"],simulations=config["simulations"]),
    params:
        value= indexer,
        
    run:
        iterations=params.value
        content=str()
        content+='SetRand(2345):\n' #For generating reproducable results
        content+="realorganism := '%s';\n" %(str(input.ProteinCodingGene))
        #Defining how the phylogenetic tree should be produced
    
        content+="treeType := 'Custom';\ntreeFile := '%s' ;\n" % str(input.phylogeny)
        content+="unitIsPam := false ;\n" #Time scale of the simulation is substitution/site not PointAcceptedMutation.  
        #Defining four models for substitution of sequence element categories 
        sub_txt='substModels := [SubstitutionModel('
        
        sub_list=[Protein_coding_genes_models[0],Intergenic_regions_models[0],RNA_genes_models[0],Repeat_regions_models[0]]
        sub_list_index=['_prot','_intergenic','_RNA_genes','_repeat_regions']
        
        codonModel=True
        for param_cat in Global_models[Protein_coding_genes_models[0]]:
                if param_cat == 'name':
                    sub_txt1=iterations[Global_models[Protein_coding_genes_models[0]][param_cat][0]+sub_list_index[0]]
                    sub_txt1+=","
                if param_cat == 'parameters':
                    codonModel=False
                    sub_param_txt='['
                    for sub_param_cat in Global_models[Protein_coding_genes_models[0]][param_cat]:
                        sub_param_txt+=str(round(iterations[sub_param_cat+sub_list_index[0]],2))
                        sub_param_txt+=', '
                    sub_param_txt2=sub_param_txt[:-2]+'],'
                if param_cat == 'frequencies':
                        sub_param_txt='['
                        frequencies=[items for items in iterations[Global_models[Protein_coding_genes_models[0]][param_cat][0]+sub_list_index[0]].split(';')]
                        for freqs in frequencies:
                             sub_param_txt+=freqs+','
                        sub_param_txt3=sub_param_txt[:-1]+'], '
                if param_cat == 'neutral_DNA':
                        sub_param_txt4=iterations[Global_models[Protein_coding_genes_models[0]][param_cat][0]+sub_list_index[0]]
                        sub_param_txt4+='),'
        if codonModel == False:
            sub_txt+=sub_txt1+sub_param_txt2+sub_param_txt3+sub_param_txt4
        if Protein_coding_genes_models[0] =='substModel_codon':
            sub_txt2=sub_txt+sub_txt1    
            sub_txt=sub_txt2[:-1]+'),'
        sub_txt=sub_txt[:-1]+'];\n'
        content+=sub_txt
        #Defining four models for insertions/deletions of sequence element categories 
        indel_list=[Protein_coding_genes_models[1],Intergenic_regions_models[1],RNA_genes_models[1],Repeat_regions_models[1]]
        indel_list_index=['_prot','_intergenic','_RNA_genes','_repeat_regions']
        LossRate=False
        indel_txt='IndelModels := ['
        iter_indel=0
        indel_txt+="IndelModel("
        for param_cat in Global_models[Protein_coding_genes_models[1]]:
                if param_cat == 'Gainrate':
                    indel_txt1=str(round(iterations[Global_models[Protein_coding_genes_models[1]][param_cat][0]+indel_list_index[0]],5))
                    indel_txt1+=","
                if param_cat == 'model':
                    indel_txt2=iterations[Global_models[Protein_coding_genes_models[1]][param_cat][0]+indel_list_index[0]]
                    indel_txt2+=","
                if param_cat == 'parameters':
                    indel_param_txt3='['
                    for indel_param_cat in Global_models[Protein_coding_genes_models[1]][param_cat]:
                        indel_param_txt3+=str(iterations[indel_param_cat+indel_list_index[0]])
                        indel_param_txt3+=', '
                    indel_param_txt3=indel_param_txt3[:-2]+'],'
                if param_cat == 'maxLen':
                    indel_txt4=str(int(iterations[Global_models[Protein_coding_genes_models[1]][param_cat][0]+indel_list_index[0]]))
                    indel_txt4+=","
                if param_cat == 'Lossrate':
                    LossRate=True
                    indel_txt5=str(round(iterations[Global_models[Protein_coding_genes_models[1]][param_cat][0]+indel_list_index[0]],5))
                    indel_txt5+="),"
        if LossRate:
            indel_txt+=indel_txt1+indel_txt2+indel_param_txt3+indel_txt4+indel_txt5
        elif LossRate ==False:
            indel_txt+=indel_txt1+indel_txt2+indel_param_txt3+indel_txt4[:-1]+"),"
        indel_txt=indel_txt[:-1]+'];\n'
        content+=indel_txt
        #Defining four models for rate variation heterogeniety within each element of sequence categories  
        var_list=[Protein_coding_genes_models[2],Intergenic_regions_models[2],RNA_genes_models[2],Repeat_regions_models[2]]
        var_list_index=['_prot','_intergenic','_RNA_genes','_repeat_regions']
        var_txt='rateVarModels := ['
        var_txt+="RateVarModel("
        Gamma=False
        Poisson=False
        for param_cat in Global_models[Protein_coding_genes_models[2]]:
                if param_cat == 'model':
                    var_txt1=iterations[Global_models[Protein_coding_genes_models[2]][param_cat][0]+var_list_index[0]]
                    var_txt1+=","
                if param_cat == 'areas':
                    var_txt2=str(int(iterations[Global_models[Protein_coding_genes_models[2]][param_cat][0]+var_list_index[0]]))
                    var_txt2+=","
                if param_cat == 'motifFreq':
                    if Protein_coding_genes_models[2] == 'rateVar_model_Gamma':
                        Gamma=True
                        var_txt3=str(round(iterations[Global_models[Protein_coding_genes_models[2]][param_cat][0]+var_list_index[0]],5))
                        var_txt3+="," 
                    if Protein_coding_genes_models[2] == 'rateVar_model_poisson':
                        Poisson=True
                        var_txt4=str(round(iterations[Global_models[Protein_coding_genes_models[2]][param_cat][0]+var_list_index[0]],5))
                        var_txt4+="),"
                if param_cat == 'alpha':
                    var_txt5=str(round(iterations[Global_models[Protein_coding_genes_models[2]][param_cat][0]+var_list_index[0]],5))
                    var_txt5+="),"
        if Gamma:
            var_txt+=var_txt1+var_txt2+var_txt3+var_txt5
        if Poisson:
            var_txt+=var_txt1+var_txt2+var_txt4+var_txt5
        var_txt=var_txt[:-1]+'];\n'
        content+=var_txt
        #SeqType assignements
        #cat2id={'Protein_coding_gene':1,'Intergenic_region':2,'RNA_gene':3,'NonCoding_DNA':4}
        #catid=[cat2id[item] for item in seqTypes]
        #seq_type_txt="seqTypes := [[1,1,1,'Protein_coding_gene'], [2,2,2,'Intergenic_region'],[3,3,3,'RNA_gene'],[4,4,4,'NonCoding_DNA']];\n"
        
        #seq_type_txt+='seqTypeAssignments := %s;\n' % catid
        
        #Defining one model for rate variation heterogeniety among sequence elements 
        var_b_txt= "amongGeneDistr := '%s';\naGAlpha := %s;\n" %(iterations['amongGeneDistr'],iterations['aGAlpha'])
        content+=var_b_txt
        #Parameters concerning gene duplications
        dupl_txt="geneDuplRate := %s;\nnumberDupl := %s;\ntransDupl := %s;\nfissionDupl := %s;\nfussionDupl := %s;\nP_pseudogene := %s;\nP_neofunc := %s;\nP_subfunc := %s;\n" % (iterations['geneDuplRate'],\
                 iterations['numberDupl'],iterations['transDupl'],iterations['fissionDupl'],iterations['fusionDupl'],iterations['P_pseudogene'],iterations['P_neofunc'],iterations['P_subfunc'])                                                                                                                                                            
        content+=dupl_txt
        #Parameters concerning gene loss
        loss_txt="geneLossRate := %s;\nnumberLoss := %s;\n" % (iterations['geneLossRate'],iterations['numberLoss'])   
        content+=loss_txt
        #parameters concerning LGT
        lgt_txt="lgtRate := %s;\northRep := %s;\nlgtGRate := %s;\nlgtGSize := %s;\n" %(iterations['lgtRate'],iterations['orthRep'],iterations['lgtGRate'],iterations['lgtGSize'])      
        content+=lgt_txt
        #Parameters concerning genome rearrangement
        genome_rear_txt="invers := %s;\ninvSize := %s;\ntransloc := %s;\ntransSize := %s;\ninvtrans := %s;\nfissionRate := %s;\nfusionRate := %s;\n" %(iterations['invers'],iterations['invSize'],iterations['transloc'],iterations['transSize'],iterations['invtrans'],iterations['fissionRate'],iterations['fusionRate'])
        content+=genome_rear_txt
        #content+=seq_type_txt
        #Parameters for writing the output
        destination= "mname := 'ProtSim';\n"
        content+=destination
        content+="wdir := '%s';\n" %(str(output.ProteinCodingGeneParams)[:-10])
        out_txt="simOutput := {\n'Newick',\n'Fasta',\nNULL}:" #If alignments are also required add ,\n'MSA', this will be needed if the Rule AssemblerMSA is used
        content+=out_txt
        txt=open(str(output.ProteinCodingGeneParams),'w')
        txt.write(content)
        txt.close()
        
        

        
        

