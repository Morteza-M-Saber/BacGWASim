#-----------------------------------------------------------------------------------------------------------------------------------------------------
# Author:   Morteza.M Saber
# Date:	    2018-02-06                                   
#-----------------------------------------------------------------------------------------------------------------------------------------------------
# Input:                                    .gff,.fa                  
# Output:                                   ._protein_coding_gene.db,._RNA_gene.fa,._intergenic_region.fa,._repeat_region.fa 
#Purpose: recieves annotation in GFF format and input sequences in fasta format and generates 5 outputfiles including all four category of sequences
#-----------------------------------------------------------------------------------------------------------------------------------------------------


# Used for system calls.
from subprocess import call

# Used for timestamping the log files.
from time import localtime, strftime

#-----------------------------------------------------------------------------------------------------------------------------------------------------
# SNAKEMAKE RULE #
import os

rule parse_genome_data:
    input: 
        GFF_file = config["GFF_file"],
        fasta_file = config["fasta_file"]
    output: 
        protein_coding_gene= expand("{outputDIR}/{SequenceDIR}/{fasta_output}_Protein_coding_gene/{iteration}.db",outputDIR=config["outputDIR"],SequenceDIR=config["SequenceDIR"],fasta_output=config["fasta_output"],iteration=range(int(config['Protein_coding_gene_CatSize']))),
        RNA_gene= expand("{outputDIR}/{SequenceDIR}/{fasta_output}_RNA_gene/{iteration}.fa",outputDIR=config["outputDIR"],SequenceDIR=config["SequenceDIR"],fasta_output=config["fasta_output"],iteration=range(int(config['RNA_gene_CatSize']))),
        intergenic_region= expand("{outputDIR}/{SequenceDIR}/{fasta_output}_Intergenic_region/{iteration}.fa",outputDIR=config["outputDIR"],SequenceDIR=config["SequenceDIR"],fasta_output=config["fasta_output"],iteration=range(int(config['Intergenic_region_CatSize']))),
        repetitive_region= expand("{outputDIR}/{SequenceDIR}/{fasta_output}_Repeat_region/{iteration}.fa",outputDIR=config["outputDIR"],SequenceDIR=config["SequenceDIR"],fasta_output=config["fasta_output"],iteration=range(int(config['Repeat_region_CatSize']))),
        JSON= expand("{outputDIR}/{SequenceDIR}/{fasta_output}.json",outputDIR=config["outputDIR"],SequenceDIR=config["SequenceDIR"],fasta_output=config["fasta_output"]),
        excel_file= expand("{outputDIR}/{SequenceDIR}/{fasta_output}.xlsx",outputDIR=config["outputDIR"],SequenceDIR=config["SequenceDIR"],fasta_output=config["fasta_output"]),
        ChromMap= expand("{outputDIR}/{SequenceDIR}/ChromMap.tsv",outputDIR=config["outputDIR"],SequenceDIR=config["SequenceDIR"])
    params:
        OutfilePath= expand("{outputDIR}/{PhylogeneticTreeDIR}",outputDIR=config["outputDIR"],PhylogeneticTreeDIR=config["PhylogeneticTreeDIR"]),
        Seq_Path=expand("{outputDIR}/{SequenceDIR}/{fasta_output}",outputDIR=config["outputDIR"],SequenceDIR=config["SequenceDIR"],fasta_output=config["fasta_output"]),
    run:
        # Parsing the GFF file provided by the user
        gene_type_dict={}
        gene_type_dict['Pseudogene']=[]
        total_regions={}
        locus=0
        with open (input.GFF_file,'r') as file:
            line=file.readline()
            while line:
                if line[0] == '#':
                       line=file.readline()
                       continue
                gbkey=[item.split('=')[1].strip() for item in line.split(';') if item.split('=')[0]=='gbkey']
                if gbkey[0] =='Src':
                    chromosome=line.split()[0]
                    total_regions[chromosome]=[line.split()[0],int(line.split()[3]),
                                  int(line.split()[4]),line.split('\t')[6],line.split('\t')[-1]]
                    line=file.readline()
                    continue
                elif gbkey[0] in ['misc_feature','repeat_region']:
                    locus+=1
                    if gbkey[0] not in gene_type_dict:
                        gene_type_dict[gbkey[0]]=[]
                    gene_type_dict[gbkey[0]].append([line.split()[0],int(line.split()[3]),
                                  int(line.split()[4]),line.split()[6],locus,line.split('\t')[-1]])
                    line=file.readline()
                    continue
                elif gbkey[0] == 'Gene':
                    locus+=1
                    pseudogene=[line.split()[0],int(line.split()[3]),
                                  int(line.split()[4]),line.split()[6],locus,line.split('\t')[-1]]
                    line=file.readline()
                    gbkey=[item.split('=')[1].strip() for item in line.split(';') if item.split('=')[0]=='gbkey']
                    if gbkey[0] in ['Gene','misc_feature','repeat_region','pseudogene']:
                        gene_type_dict['Pseudogene'].append(pseudogene)
                        continue
                    if line.split()[2] not in gene_type_dict:
                            gene_type_dict[line.split()[2]]=[]
                    if line.split()[2] == 'CDS':
                            gene_type_dict[line.split()[2]].append([line.split()[0],int(line.split()[3]),
                                  int(line.split()[4]),line.split()[6],locus,line.split('\t')[-1]])
                            if (int(line.split()[4])- int(line.split()[3])+1)%3 !=0:
                                print('Error in CDS length not a multiple of 3 in %s' %line)
                            line=file.readline()
                            continue
                    else :
                            gene_type_dict[line.split()[2]].append([line.split()[0],int(line.split()[3]),
                                  int(line.split()[4]),line.split()[6],locus,line.split('\t')[-1]])
                            line=file.readline()
                            line=file.readline()
                else:
                    print('Unknown type of annotation in %s' %line)
                    print(gbkey)
                    line=file.readline()
        gene_type_dict['Total_regions']=total_regions
        #The function to subtract ranges
        from itertools import chain
        def range_diff(r1, r2):
            s1, e1 = r1
            s2, e2 = r2
            endpoints = sorted((s1, s2, e1, e2))
            result = []
            if endpoints[0] == s1:
                result.append((endpoints[0], endpoints[1]))
            if endpoints[3] == e1:
                result.append((endpoints[2], endpoints[3]))
            return (result)
        
        def multirange_diff(r1_list, r2_list):
            for r2 in r2_list:
                r1_list = list(chain(*[range_diff(r1, r2) for r1 in r1_list]))
            return (r1_list)                
        
        
        #Preparing sets of all the annotated regions
        ### In RefSeq coordinates the the last coordiante is part of the gene and it is 1-based
        
        annotated_sets={}
        for chromo in total_regions:
            annotated_sets[chromo]=[]
            for gene_types in gene_type_dict:
                for coordiantes in gene_type_dict[gene_types]:
                    if coordiantes[0] == chromo:
                        annotated_sets[chromo].append(tuple([coordiantes[1]-1,coordiantes[2]+1]))
        
        #total length of the bacterial genome
        total_length_chromo={}
        for chromo in total_regions:         
            total_length_chromo[chromo]=[tuple([total_regions[chromo][1],total_regions[chromo][2]])]
        
        
        
        #Subtracting total lenght of bacterial genome from annotated sets to get intergenic region
        IGR={}
        for chromo in total_regions:
            IGR[chromo]=multirange_diff(total_length_chromo[chromo],annotated_sets[chromo])
        
        
        #Discarding very short IGR with length less than 10 and standardize the format
        IGR_uniform=[]
        iter_igr=1
        for chromo in IGR:
            for coordinates in IGR[chromo]:
                if coordinates[1] - coordinates[0]>= 10:
                    locus+=1
                    IGR_uniform.append([chromo,coordinates[0],coordinates[1],'+',locus,'ID=IGR%s'%iter_igr])
                    iter_igr+=1
        gene_type_dict['IGR']=IGR_uniform
        
        #Retrieving FASTA sequence of all the elements
        from Bio import SeqIO
        genome_seq={}
        
        with open(input.fasta_file, "r") as handle:
            for records in SeqIO.parse(handle, "fasta"):
                genome_seq[records.id]=records.seq
        
        
        # We can define three categories with different substitution matrices:
            #1) Protein coding genes (CDS)
            #2) RNA genes (tRNA,rRNA,ncRNA,'tmRNA',transcript,misc_feature')
            #3) noncoding sequences (Pseudogene,IGR and repeat regions) #enough for today, save eyes
        
        total_types={'Protein_coding_gene':['CDS'],
        'RNA_gene':['tRNA','rRNA','ncRNA','tmRNA','transcript','misc_feature'],
        'Repeat_region':['Pseudogene','repeat_region'],
        'Intergenic_region':['IGR']}
        
        #Retrieving gene_ids,gene_types,locus_number and sequence of each gene
        from Bio.Seq import Seq
        total_types_seq={}
        alfsimID=1
        for genes_types in total_types:
            total_types_seq[genes_types]={}
            for type_categories in total_types[genes_types]:
                total_types_seq[genes_types][type_categories]=[]
                for coordinates in gene_type_dict[type_categories]:
                    gene_id_cur=[item.split('=')[1].strip() for item in coordinates[-1].split(';') if item.split('=')[0]=='ID'][0]
                    chromo,st,en,strand=coordinates[0],coordinates[1],coordinates[2],coordinates[3]
                    gene_type_cur=genes_types
                    gene_locus_cur=coordinates[4]
                    gene_seq_cur=str(genome_seq[coordinates[0]][coordinates[1]-1:coordinates[2]])
                    if genes_types == 'Protein_coding_gene':
                        if coordinates[3] == '+':
                            gene_prot_cur=str(genome_seq[coordinates[0]][coordinates[1]-1:coordinates[2]].translate())
                        if coordinates[3] == '-':
                            gene_prot_cur=str(genome_seq[coordinates[0]][coordinates[1]-1:coordinates[2]].reverse_complement().translate())
                            gene_seq_cur=str(Seq(gene_seq_cur).reverse_complement())
                        total_types_seq[genes_types][type_categories].append([chromo,st,en,strand,gene_id_cur,
                                   gene_type_cur,str(alfsimID),gene_seq_cur,gene_prot_cur,coordinates[-1]])
                        alfsimID+=1
                    else:
                        if coordinates[3] == '-':
                            gene_seq_cur=str(Seq(gene_seq_cur).reverse_complement())
                        total_types_seq[genes_types][type_categories].append([chromo,st,en,strand,gene_id_cur,
                                   gene_type_cur,gene_locus_cur,gene_seq_cur,coordinates[-1]])
                        
                        
                        
                    
            
    #   #Writing sequences in the fasta file
        desired_types=config['seq_types']
        for types in desired_types.split(','):
            if types not in total_types:
                print('The desired type: %s not defined!' %types)
            else:
    #            if types == 'Protein_coding_gene':
    #                for category in total_types_seq[types]:
    #                    for coordinate in total_types_seq[types][category]:
    #                        txt.write('>%s, sequence type: %s, locus: %s\n%s\n'%(coordinate[0],coordinate[1],coordinate[2],coordinate[3]))
                if types != 'Protein_coding_gene':
                   # if types == 'RNA_gene':
                        #txt=open(str(output.RNA_gene),'w')
                    #if types == 'Intergenic_region':
                       # txt=open(str(output.intergenic_region),'w')
                    #if types == 'Repeat_region':
                        #txt=open(str(output.repetitive_region),'w')
                    #for category in total_types_seq[types]:
                        iteration=0
                        TotalCoordinate=[]
                        for category in total_types_seq[types]:
                            for coords in total_types_seq[types][category]:
                                TotalCoordinate.append(coords)
                        TotalCoordSize=len(TotalCoordinate)
                        from math import ceil
                        CatSize= ceil(TotalCoordSize/config[types+'_CatSize']) #This will determine how many enteries to be writeen in each db, depending on the number of category defined in ConfigFile
                        st=0
                        en=CatSize if CatSize < TotalCoordSize else TotalCoordSize
                        for cats in range(config[str(types)+'_CatSize']):
                            CoordNow=TotalCoordinate[st:en]
                            PathNow=params.Seq_Path[0]+'_'+types+'/'+str(iteration)+'.fa'
                            txt=open(PathNow,'w')
                            for coordinate in CoordNow:
                                txt.write('>%s, sequence type: %s, locus: %s\n%s\n'%(coordinate[4],coordinate[5],coordinate[6],coordinate[7]))
                            txt.close()
                            st+=CatSize
                            en+=CatSize
                            if en >TotalCoordSize:
                                en=TotalCoordSize
                            iteration+=1
    
    #    #writing protein sequences in fasta format
    #    txt=open(fasta_output+'_aa.fa','w')
    #    if 'Protein_coding_gene' in desired_types.split(','):
    #                for coordinate in total_types_seq['Protein_coding_gene']['CDS']:
    #                    txt.write('>%s, sequence type: %s, locus: %s\n%s\n'%(coordinate[0],coordinate[1],coordinate[2],coordinate[4]))
    #    txt.close()
        
        #Writing sequences in the Darwin format
        for types in desired_types.split(','):
            if types not in total_types:
                print('The desired type: %s not defined!' %types)
            else:
                if types == 'Protein_coding_gene':
                    iteration=0
                    
                    #txt=open(str(output.protein_coding_gene),'w')
                    for category in total_types_seq[types]:
                        TotalCDS=len(total_types_seq[types][category])
                        from math import ceil
                        CatSize= ceil(TotalCDS/config[str(types)+'_CatSize']) #This will determine how many enteries to be writeen in each db
                        TotalCoordinate=total_types_seq[types][category]
                        st=0
                        en=CatSize
                        for cats in range(config[str(types)+'_CatSize']):
                            CoordNow=TotalCoordinate[st:en]
                            PathNow=params.Seq_Path[0]+'_'+types+'/'+str(iteration)+'.db'
                            txt=open(PathNow,'w')
                            for coordinate in CoordNow:
                                txt.write('<E><ID>%s</ID><TP>%s</TP><LC>%s</LC><SEQ>%s</SEQ><DNA>%s</DNA></E>\n'%(coordinate[4],coordinate[5],coordinate[6],coordinate[8].replace('*',''),coordinate[7]))
                            txt.close()
                            st+=CatSize
                            en+=CatSize
                            if en >TotalCDS:
                                en=TotalCDS
                            iteration+=1
                          
    #            else:
    #                for category in total_types_seq[types]:
    #                   for coordinate in total_types_seq[types][category]:
    #                        txt.write('<E><ID>%s</ID><TP>%s</TP><LC>%s</LC><SEQ>%s</SEQ><DNA>%s</DNA></E>\n'%(coordinate[0],coordinate[1],coordinate[2],'AAA',coordinate[3]))
                    
        
    
        
        
        #Writing sequences info detail into an excel file
        seq_info=str(output.excel_file)
        import xlsxwriter
        workbook=xlsxwriter.Workbook(seq_info)
        worksheet=workbook.add_worksheet('Seq_count')
        worksheet.write(0,0,'Sequence Category')
        worksheet.write(0,1,'Sequence Subcategory')
        worksheet.write(0,2,'Count')
        iter=1
        for item in total_types:
            worksheet.write(iter,0,item)
            total_cur=0
            for seq_type in total_types[item]:
                total_cur+=len(gene_type_dict[seq_type])
            worksheet.write(iter,2,total_cur)
            iter+=1
            for item2 in total_types[item]:
                worksheet.write(iter,1,item2)
                worksheet.write(iter,2,len(gene_type_dict[item2]))
                iter+=1
        
        
        worksheet=workbook.add_worksheet('Protein_coding_genes')
        iter=1
        for item in total_types['Protein_coding_gene']:
            for item2 in gene_type_dict[item]:
                gene_id=gene_id_cur=[item3.split('=')[1].strip() for item3 in item2[-1].split(';') if item3.split('=')[0]=='ID'][0]
                gene_name=gene_id_cur=[item3.split('=')[1].strip() for item3 in item2[-1].split(';') if item3.split('=')[0]=='Name'][0]
                gene_seq_cur=str(genome_seq[item2[0]][item2[1]-1:item2[2]])
                if item2[3] == '+':
                            gene_prot_cur=str(genome_seq[item2[0]][item2[1]-1:item2[2]].translate())
                if item2[3] == '-':
                            gene_prot_cur=str(genome_seq[item2[0]][item2[1]-1:item2[2]].reverse_complement().translate())
                worksheet.write(iter,0,gene_name)
                worksheet.write(iter,1,gene_id)
                worksheet.write(iter,2,item2[0])
                worksheet.write(iter,3,item2[1])
                worksheet.write(iter,4,item2[2])
                worksheet.write(iter,5,item2[3])
                worksheet.write(iter,6,item2[4])
                worksheet.write(iter,7,gene_seq_cur)
                worksheet.write(iter,8,gene_prot_cur)
                iter+=1
                
                
                
        worksheet=workbook.add_worksheet('RNA_gene')
        iter=1
        for item in total_types['RNA_gene']:
            for item2 in gene_type_dict[item]:
                gene_id=gene_id_cur=[item3.split('=')[1].strip() for item3 in item2[-1].split(';') if item3.split('=')[0]=='ID'][0]
                gene_name=gene_id_cur=[item3.split('=')[1].strip() for item3 in item2[-1].split(';') if item3.split('=')[0]=='gene']
                gene_seq_cur=str(genome_seq[item2[0]][item2[1]-1:item2[2]])
                if len(gene_name) >0:
                    worksheet.write(iter,0,gene_name[0])
                worksheet.write(iter,1,gene_id)
                worksheet.write(iter,2,item2[0])
                worksheet.write(iter,3,item2[1])
                worksheet.write(iter,4,item2[2])
                worksheet.write(iter,5,item2[3])
                worksheet.write(iter,6,item2[4])
                worksheet.write(iter,7,gene_seq_cur)
                iter+=1
                
        worksheet=workbook.add_worksheet('Repeat_region')
        iter=1
        for item in total_types['Repeat_region']:
            for item2 in gene_type_dict[item]:
                gene_id=[item3.split('=')[1].strip() for item3 in item2[-1].split(';') if item3.split('=')[0]=='ID'][0]
                gene_name=[item3.split('=')[1].strip() for item3 in item2[-1].split(';') if item3.split('=')[0]=='gene']
                gene_seq_cur=str(genome_seq[item2[0]][item2[1]-1:item2[2]])
                if len(gene_name) >0:
                    worksheet.write(iter,0,gene_name[0])
                worksheet.write(iter,1,gene_id)
                worksheet.write(iter,2,item2[0])
                worksheet.write(iter,3,item2[1])
                worksheet.write(iter,4,item2[2])
                worksheet.write(iter,5,item2[3])
                worksheet.write(iter,6,item2[4])
                worksheet.write(iter,7,gene_seq_cur)
                iter+=1
        
        worksheet=workbook.add_worksheet('Intergenic_region')
        iter=1
        for item in total_types['Intergenic_region']:
            for item2 in gene_type_dict[item]:
                gene_id=[item3.split('=')[1].strip() for item3 in item2[-1].split(';') if item3.split('=')[0]=='ID'][0]
                gene_name=[item3.split('=')[1].strip() for item3 in item2[-1].split(';') if item3.split('=')[0]=='gene']
                gene_seq_cur=str(genome_seq[item2[0]][item2[1]-1:item2[2]])
                if len(gene_name) >0:
                    worksheet.write(iter,0,gene_name[0])
                worksheet.write(iter,1,gene_id)
                worksheet.write(iter,2,item2[0])
                worksheet.write(iter,3,item2[1])
                worksheet.write(iter,4,item2[2])
                worksheet.write(iter,5,item2[3])
                worksheet.write(iter,6,item2[4])
                worksheet.write(iter,7,gene_seq_cur)
                iter+=1
        workbook.close()
        #writing the coordiante data into a JSON file for later use
        import json
        with open(str(output.JSON), 'w') as f:
            json.dump(total_types_seq, f)
        #Creat a map to transform bacterial chromosome names to regular 1-22 human chromosome names to be used by GCTA for phenotype simulation
        MapNum=1
        with open(str(output.ChromMap), 'w') as f:
            for chrom in total_regions:
                f.write('%s\t%s\n'%(chrom,MapNum))
                MapNum+=1
                if MapNum >22:
                    Print('More than 22 chromosomes counted in the dataset, this will cause error in GCTA genotype simulation ')
        

        